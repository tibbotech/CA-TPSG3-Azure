'***********************************************************************************************************
'			COMMONLY USED PROCEDURES FOR PRINTING HTML PAGES
'	Initialize web server(allocate buff page, setup port and connection property etc.)
'	functions to extract, generate or modify http requset string
'***********************************************************************************************************

include "global.tbh"

public dim getting_postdata as no_yes
public dim html_upload_result as byte
#if UPLOAD_ENABLED=1
dim boundary_string as string(20)
#endif
'==============================================================================
sub html_replace_chr(byref s as string, a as string, b as string)
	dim pos as byte
	dim temp as string
	pos=instr(1,s,a,1)
	while pos > 0 
		temp=right(s,len(s)-pos-len(a)+1)
		s=left(s,pos-1)+b+temp
		pos=instr(pos+1,s,a,1)
	wend
end sub

'------------------------------------------------------------------------------
public sub html_init
	dim f as byte

	for f=SOCK_HTTP to SOCK_HTTP+NUM_HTTP_SOCKETS-1
		sock.num=f
		sock.txbuffrq(HTTP_TX_SZ)
		sock.varbuffrq(HTTP_TX_SZ)
		sock.redir(PL_REDIR_SOCK0+sock.num)
	next f
	sys.buffalloc

	for f=SOCK_HTTP to SOCK_HTTP+NUM_HTTP_SOCKETS-1
		sock.num=f
		sock.protocol=PL_SOCK_PROTOCOL_TCP
		sock.localportlist="23"
		sock.httpportlist="80"
		sock.connectiontout=40
		sock.inconmode= PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
		sock.reconmode= PL_SOCK_RECONMODE_0
	next f
end sub

'------------------------------------------------------------------------------
public sub sock_setsend(byref s as string)
'Making sure the tx buffer is free before adding more data to the buffer.
	while sock.txfree<len(s)
		if sock.num >= SOCK_HTTP and sock.num < SOCK_HTTP+NUM_HTTP_SOCKETS then
			if sock.statesimple=PL_SSTS_CLOSED then 
				sock.txclear
				exit sub
			end if
		else
			for sock.num=SOCK_HTTP to SOCK_HTTP+NUM_HTTP_SOCKETS-1
				sock.close
			next sock.num
			exit sub
		end if
	wend
	sock.setdata(s)
	sock.send
end sub

'------------------------------------------------------------------------------
public function get_http_argument(byref http_req_string as string, byref argument as string) as string
'Get one specific argument from the http request string.
'For example If http_req_string=http://index.html&p1=abc&p2=def by calling this function, 
'get_http_argument(sock.httprqstring,"p1="), the function returns "abc"
	dim x, y as byte
	x=instr(1, http_req_string, argument,1)
	if (x=0) then
		get_http_argument=""
		exit function
	end if
	x=x + len(argument)
	y=instr(x, http_req_string, "&",1)
	if (y=0) then
		y=instr(x, http_req_string, " ",1)
		if (y=0) then
			y=len(argument)
		end if
	end if
	get_http_argument=mid(http_req_string, x, y - x)
end function

'------------------------------------------------------------------------------
public function mod_http_argument(byref http_req_string as string, byref argument as string, byref arg_val as string) as string
'modify the value of argument in the http_req_string, if the argument doesn't exist, add it the end of http_req_string 
	dim pos1, pos2 as byte
	dim s,s1 as string
	'empty http_req_string
	if http_req_string="" then 
		mod_http_argument="?"+argument+"="+arg_val
		exit function
	end if
	
	'remove argument if arg_val=""
	if arg_val= "" then
		pos1=instr(1,http_req_string,argument,1)
		if pos1 > 0 then
			s=left(http_req_string,pos1-1)
			pos2=instr(pos1,http_req_string,"&",1)
			
			if pos2 > 0 then
				s1=right(http_req_string,len(http_req_string)-pos2)
			else
				if s ="?" then s=""
				s1=""
			end if
			mod_http_argument=s+s1
			exit function
		end if
		mod_http_argument=http_req_string
		exit function
	end if
	'remove the tailing infor
	pos1=instr(1,http_req_string," HTTP",1)
	http_req_string=left(http_req_string,pos1-1)
	
	'find the argument
	pos1=instr(1,http_req_string,argument,1)
	
	'if the argument already exit, modify the value to arg_val, else add it to the end of http_req_string
	if pos1 > 0 then 
		pos1=pos1+len(argument)-1
		pos2=instr(1,http_req_string,"?",1)
		if pos2 > 0 then http_req_string=right(http_req_string,len(http_req_string)-pos2)
		s="?"+left(http_req_string,pos1)+"="+arg_val
		
		'the argument could be in the middle to the http_req_string
		pos2=instr(pos1,http_req_string,"&",1)
		if pos2 > 0 then
			s=s+right(http_req_string,len(http_req_string)-pos2+1)
			mod_http_argument=s
			exit function
		else
			mod_http_argument=s
			exit function
		end if
	else
		mod_http_argument="?"+http_req_string+"&"+argument+"="+arg_val
	end if
end function

'------------------------------------------------------------------------------
public sub html_spec_chr_convert(byref http_req_string as string)
'convert the escape characters into normal characters (ex. %
	dim char_ascii as string(2)
	dim char_str as string(1)
	dim pos1 as byte
	dim temp1, temp2 as string
	do	
		pos1=instr(1,http_req_string,"+",1)
		if pos1 > 0 then
			html_replace_chr(http_req_string,"+"," ")
		end if
		pos1=instr(1,http_req_string,"%",1)
		if pos1 > 0 then 
			char_ascii=mid(http_req_string,pos1+1,2)
			char_str=chr("&h"+char_ascii)
			html_replace_chr(http_req_string,"%"+char_ascii,char_str)
		end if	
	loop while pos1 > 0
end sub

#if UPLOAD_ENABLED=1
'------------------------------------------------------------------------------
public function html_file_upload as byte
	dim pos1, pos2, pos3, pos4 as byte
	dim bstring_found as no_yes
	dim stemp1, stemp2 as string(30)
	dim s as string
	while true
		device_upload_cycle_start
		if sock.state <> PL_SST_EST then
			html_file_upload = 254
			sock.reset
			goto finish
		end if
		if getting_postdata=no then
			bstring_found=no
			while true
				if bstring_found=no then
				
					'find boundary string
					pos1=instr(1,sock.httprqstring,strgen(29,"-"),1)+29
					pos2=instr(pos1,sock.httprqstring,chr(&h0D)+chr(&h0A),1)
					s=sock.gethttprqstring(pos2+1)
					boundary_string=mid(s,pos1,pos2-pos1)
					bstring_found=yes
					goto find_parameter
				end if
				
				'find parameters
				if instr(1,sock.httprqstring,boundary_string+chr(&h0D)+chr(&h0A),1)>0 then
find_parameter:
					pos1=instr(1,sock.httprqstring,"name=",1)
					pos2=instr(pos1+5,sock.httprqstring,chr(&h0D)+chr(&h0A)+chr(&h0D)+chr(&h0A),1)
					pos4=instr(1,sock.httprqstring,"filename=",1)
					if pos4>pos1 and pos4<pos2 then
						pos2=pos4-1
						pos3=instr(pos2,sock.httprqstring,chr(&h0D)+chr(&h0A),1)
						s=sock.gethttprqstring(pos3-1)
						stemp1=mid(s,pos1+6,pos2-pos1-8)
						stemp2=mid(s,pos2+11,pos3-pos2-12)
						html_file_upload=device_upload_proc_parameter(stemp1,stemp2)
						if html_file_upload<>0 then goto finish
					else
						pos3=instr(pos2+4,sock.httprqstring,chr(&h0D)+chr(&h0A),1)
						if pos1=0 or pos2=0 or pos3=0 then
							exit while
						else
							s=sock.gethttprqstring(pos3-1)
							stemp1=mid(s,pos1+6,pos2-pos1-7)
							stemp2=mid(s,pos2+4,pos3-pos2-4)
							html_file_upload=device_upload_proc_parameter(stemp1,stemp2)
							if html_file_upload<>0 then goto finish
						end if
					end if
				else
					'wait till the httprqstring is full or closing is found
					if instr(1,sock.httprqstring,strgen(29,"-")+boundary_string+"--",1)>0 or len(sock.httprqstring)>254 then
						pos1=instr(1,sock.httprqstring,chr(&h0D)+chr(&h0A)+chr(&h0D)+chr(&h0A),1)
						s=sock.gethttprqstring(pos1+3)
						getting_postdata=yes
						exit while
					end if
				end if
			wend
		end if
		if getting_postdata=yes then
			pos1=instr(1,sock.httprqstring,chr(&h0D)+chr(&h0A)+strgen(29,"-")+boundary_string+"--",1)
			if pos1>0 then
				s=sock.gethttprqstring(pos1-1)
				if s="" then
					html_file_upload=device_upload_complete
					goto finish
				end if
			else
				s=device_upload_get_httprqstring
				if s="" then goto finish
			end if
			html_file_upload=device_upload_set_data(s)
			if html_file_upload<>0 then exit function			
		end if
	wend
finish:
device_upload_cycle_end
end function
#endif