'***********************************************************************************************************
'		SETTINGS LIBRARY
'***********************************************************************************************************
'Works with .stor or .fd

include "global.tbh"  

'--------------------------------------------------------------------------------
Const STG_FIELD_SEPARATOR=9
Const STG_END_OF_LINE=13
Const STG_TIMESTAMP_LENGTH=7

'--------------------------------------------------------------------------------
declare sub check_for_missing_fields(curr_pos as word, line_end_pos as word)
declare function ramarr_setdata(byref datatoset as string,startaddr as word) as byte
declare function ramarr_getdata(startaddr as word,len as byte) as string
declare function load_setting_data(byref stg_name as string,byref num as byte,byref stg_str as string) as en_stg_status
declare function setting_sg_internal(byref stg_name as string,index as byte,byref stg_value as string,op as en_stg_rdwr) as en_stg_status

'--------------------------------------------------------------------------------
#if USE_STG_TIMESTAMP<>0
public dim stg_timestamp as struct_stg_timestamp
#endif

public dim sdr(MAX_NUM_SETTINGS) as sdr_type
public dim num_stg as byte
#if STORAGE_MEMORY<>0
	public dim settings_filenum as byte
	dim suspend_flushing as no_yes
#endif
dim stg_ram_array(STG_RAM_ARRAY_SIZE) as byte



'================================================================================
public function settings_init() as en_stg_status
'This procedure MUST BE called before any other function in this library is used. It initializes
'necessary global structure sdr() and related stuff.

	dim s as string
	dim i,j,c,line_end,nvmem_offset_ctr,ramarr_offset_ctr as word
	dim f,x as byte
	#if STORAGE_MEMORY<>0
		dim fd_status as pl_fd_status_codes
	#endif


	#if STORAGE_MEMORY<>0
		suspend_flushing=NO
		fd.filenum=settings_filenum
		fd_status=fd.open(SETTINGS_FILENAME)
		
		select case fd_status
		case PL_FD_STATUS_NOT_FOUND
			'need to create this file
			fd_status=fd.create(SETTINGS_FILENAME)
			if fd_status<>PL_FD_STATUS_OK then
				settings_init=EN_STG_STATUS_FAILURE
				exit function
			end if

			fd_status=fd.open(SETTINGS_FILENAME)
			if fd_status<>PL_FD_STATUS_OK then
				settings_init=EN_STG_STATUS_FAILURE
				exit function
			end if

		case PL_FD_STATUS_OK
			'all is good -- just reset the file size to 0
		
		case else
			'some other problem
			settings_init=EN_STG_STATUS_FAILURE
			exit function
		end select
	#endif

	num_stg=0 'will count settings (starting from 0)
	
	romfile.open(SETTINGS_SCRIPT_FILE)				'this file is a setting descriptor table
	i=romfile.find(romfile.pointer,">>",1)
	while i<>0
		'we are now at the ">>" pointing at the beginning of one setting descriptor line
		romfile.pointer=i+2
		
		'find the end of this setting descriptor line
		line_end=romfile.find(romfile.pointer,chr(STG_END_OF_LINE),1)
		
		'extract setting name
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		'name too long?
		if len(s)>MAX_SETTING_NAME_LEN then
			sys.halt
			num_stg=0 'you need to increase MAX_SETTING_NAME_LEN!
		end if
		sdr(num_stg).name=s

		'extract storage type (non-volatile or RAM)
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		if asc(s)<>`E` and asc(s)<>`R` then
			sys.halt
			num_stg=0 'unknown storage type
		end if
		sdr(num_stg).storage=asc(s)
		
		'extract setting type
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		select case asc(s)
		case `B`
		case `W`
		case `S`
		case `D`
		case else
			sys.halt
			num_stg=0 'unknown setting type
		end select
		sdr(num_stg).stype=asc(s)

		'extract the number of members
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		if val(s)>254 then
			sys.halt
			num_stg=0	'max number of members can't exceed 254 (255 is a special value, see setting_sg() function)
		end if
		sdr(num_stg).members=val(s)
		
		'extract p1
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		select case sdr(num_stg).stype
		case `B`,`S`,`D`
			if val(s)>255 then
				sys.halt
				'minimum value (p1 param) for byte settings can't exceed 255
				'minimum length (p1 param) for string and dot-decimal settings can't exceed 255
			num_stg=0
			end if
		end select
		'we do not need to check word
		sdr(num_stg).p1=val(s)

		'extract p2
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		

		select case sdr(num_stg).stype
		case `B`,`S`,`D`
			if val(s)>255 then
				sys.halt
				'maximum value (p1 param) for byte settings can't exceed 255
				'maximum length (p1 param) for string and dot-decimal settings can't exceed 255
			num_stg=0
			end if
		end select
		'we do not need to check word
		sdr(num_stg).p2=val(s)

		if sdr(num_stg).p2<sdr(num_stg).p1 then
			sys.halt
			num_stg=0	'p2 parameter cannot be smaller than p1 parameter
		end if

		'now see if this setting will fit in 255 bytes
		select case sdr(num_stg).stype
		case `B`
			j=1
		case `W`
			j=2
		case `S`,`D`
			j=sdr(num_stg).p2+1
		end select
		j=j*sdr(num_stg).members+1
		#if USE_STG_TIMESTAMP<>0
			j=j+STG_TIMESTAMP_LENGTH
		#endif
		if j>255 then
			sys.halt
			'this setting (with its type, number of members, etc. occupies more than 255 bytes in NV MEM,
			'which is not allowed
			num_stg=0
		end if


		'extract initialization mode
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		
		select case asc(s)
		case `I`
		case `A`
		case else
			sys.halt
			num_stg=0 'unknown initialization mode
		end select
		sdr(num_stg).ini=asc(s)

		'memorize the offset of the default value
		do
			s=romfile.getdata(1)
		loop while s=chr(STG_FIELD_SEPARATOR)
		'are we at the end of the string?
		if s=chr(STG_END_OF_LINE) then
			sys.halt
			num_stg=0 'default value field is missing in the descriptor
		end if
		sdr(num_stg).romaddr_def=romfile.pointer-1

		'done with this setting, move to next one
		i=romfile.find(romfile.pointer,">>",1)
		num_stg=num_stg+1
		c=c+x
	
		'exceeded the max number of settings?
		if num_stg>=MAX_NUM_SETTINGS and i<>0 then
			sys.halt
			num_stg=0 'you need to increase MAX_NUM_SETTINGS!
		end if
	
	wend

	'now calculate addresses in the non-volatile memory (NV MEM) and RAM array
	nvmem_offset_ctr=1 'will count offset in the NV MEM (addresses start from 1).
	ramarr_offset_ctr=0 'will count offset in the RAM array (addresses start from 0).

	for f=0 to num_stg-1
		if sdr(f).storage=`E` then
			sdr(f).nvaddr=nvmem_offset_ctr
		else
			sdr(f).nvaddr=ramarr_offset_ctr
		end if
		
		select case chr(sdr(f).stype)
		case "B":	'byte (1 byte)
			x=1
		case "W":	'word (2 bytes)
			x=2
		case else:	'string or dot-decimal string (1 byte for length + max string length)
			x=1+sdr(f).p2
		end select
		
		sdr(f).member_size=x 	'fill out member length
		i=x*sdr(f).members+1	'total length occupied by a member
		#if USE_STG_TIMESTAMP<>0
			i=i+STG_TIMESTAMP_LENGTH 'add the timestamp field when enabled
		#endif
		if i>255 then
			sys.halt
			num_stg=0 'total size occupied by (all members of) a setting + cs + timestamp must not exceed 255 bytes
		end if
		sdr(f).setting_size=i

		if sdr(f).storage=`E` then
			nvmem_offset_ctr=nvmem_offset_ctr+i
		else
			ramarr_offset_ctr=ramarr_offset_ctr+i
		end if

	next f

#if STORAGE_MEMORY=0
	'exceeded EEPROM capacity? (we do not check this for the flash disk
	if nvmem_offset_ctr>=stor.size then
		sys.halt
		num_stg=0 'your non-volatile settings do not fit in the EEPROM!
	end if

#else
	'create a file of required size
	fd.setpointer(fd.filesize+1)
	while fd.filesize<c
		if nvmem_offset_ctr-fd.filesize>255 then
			x=255
		else
			x=nvmem_offset_ctr-fd.filesize
		end if
		s=strgen(x,chr(0))
		fd.setdata(s)
	wend
#endif

	'exceeded RAM array capacity
	if ramarr_offset_ctr>STG_RAM_ARRAY_SIZE then
		sys.halt
		num_stg=0 'your RAM settings do not fit in the RAM array!
	end if

	'initialized settings stored in RAM
	settings_restore_def(EN_STG_INIT_MODE_RAM_ONLY)

end function

'-------------------------------------------------------------
sub check_for_missing_fields(curr_pos as word, line_end_pos as word)
	if curr_pos=0 or curr_pos>line_end_pos then
		sys.halt
		'one of your descriptor lines has missing fields
	end if
end sub

'-------------------------------------------------------------
public function setting_check() as en_stg_status
	dim f as byte
	dim stg_value as string(MAX_SETTING_VALUE_LEN) 

	f=0
	setting_check=setting_sg(str(f),0,stg_value,EN_STG_GET)
	while setting_check=EN_STG_STATUS_OK
		f=f+1
		setting_check=setting_sg(str(f),0,stg_value,EN_STG_GET)
	wend
	if setting_check=EN_STG_STATUS_UNKNOWN then
		setting_check=EN_STG_STATUS_OK
	end if
end function

'-------------------------------------------------------------
public function setting_member_restore_def(byref stg_name as string, index as byte) as en_stg_status
'Initializes a single member of specified setting

	dim s as string(MAX_SETTING_VALUE_LEN)

	'get default value -- this will also verify that the setting exists
	setting_member_restore_def=setting_get_def(stg_name,index,s)
	if setting_member_restore_def<>EN_STG_STATUS_OK then exit function

	'set default value
	setting_member_restore_def=setting_sg(stg_name,index,s,EN_STG_SET)
end function


'--------------------------------------------------------------------------------
public function settings_restore_def(init_mode as stg_init_modes) as en_stg_status
'Initializes settings. 
'When init_field_override=NO, a particular setting is initialized only when the "Ini" field for this
'setting is "A" or when the setting is invalid.
'When init_field_override=YES, all settings are initialized irregardless of other factors.
'The following applies only when USE_STG_TIMESTAMP<>0 (see settings.tbh):
'The timestamp of all initialized settings will be set to the value of stg_timestamp (global struct).

	dim x,f,f2 as byte
	dim pos,pos2 as word
	dim s,s2 as string
	
	#if USE_STG_TIMESTAMP<>0
		dim stg_timestamp_bup as struct_stg_timestamp
	#endif
	#if STORAGE_MEMORY<>0
		dim fd_status as pl_fd_status_codes
	#endif

	romfile.open(SETTINGS_SCRIPT_FILE)
	
	#if STORAGE_MEMORY<>0
		fd.filenum=settings_filenum
		suspend_flushing=YES
	#endif


	for f=0 to num_stg-1
		'do we need to initialize this setting?
		
		'code below may appear "convoluted" but it is done like this for a reason -- to avoid using setting_sg
		'whenever possible!
		
		if sdr(f).storage=`E` then
			if (sdr(f).ini=`A` and init_mode<>EN_STG_INIT_MODE_RAM_ONLY) or init_mode=EN_STG_INIT_MODE_OVERRIDE then goto init_this
			
			'do we need to check the setting for sanity?
			if init_mode<>EN_STG_INIT_MODE_RAM_ONLY then
				#if USE_STG_TIMESTAMP<>0
					stg_timestamp_bup=stg_timestamp 'reading the setting will change stg_timestamp
				#endif
				x=setting_sg(sdr(f).name,0,s,EN_STG_GET) 'here is where X is set -- we check it below
				#if USE_STG_TIMESTAMP<>0
					stg_timestamp=stg_timestamp_bup
				#endif
			else
				x=EN_STG_STATUS_OK
			end if
		else
			'RAM settings are always initialized
			goto init_this
		end if

		if x<>EN_STG_STATUS_OK then 'x is set above (see "here is where X is set")
init_this:				
			'yes, initialization is required- get default value
			romfile.pointer=sdr(f).romaddr_def
			pos=romfile.find(romfile.pointer,chr(STG_END_OF_LINE),1)
			pos2=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1)
			if pos2>0 and pos2<pos then
				pos=pos2
			end if
			
			s=romfile.getdata(pos-romfile.pointer)

			'we have two cases: when there is a single value for all setting members, and when there are
			'separate values
			if instr(1,s,"~",1)<>0 then
				'there are 2 or more initialization values
				for f2=0 to sdr(f).members-1
					pos=instr(1,s,"~",1)
					if pos=0 then
						s2=s
					else	
						s2=left(s,pos-1)
						s=right(s,len(s)-pos)
					end if
					if s2="^" then s2=""
					x=setting_sg(sdr(f).name,f2,s2,EN_STG_SET) '255 means "set all members to the same value"
					if x<>EN_STG_STATUS_OK then
						settings_restore_def=x
						#if STORAGE_MEMORY<>0
							suspend_flushing=NO
						#endif
						exit function
					end if
				next f
			else
				'there is a single initialization value
				if s="^" then s=""
				x=setting_sg(sdr(f).name,255,s,EN_STG_SET) '255 means "set all members to the same value"
				if x<>EN_STG_STATUS_OK then
					settings_restore_def=x
					#if STORAGE_MEMORY<>0
						suspend_flushing=NO
					#endif
					exit function
				end if
			end if
		end if
	next f

	'all OK!
	#if STORAGE_MEMORY<>0
		suspend_flushing=NO
		fd_status=fd.flush
		if fd_status<>PL_FD_STATUS_OK then
			settings_restore_def=EN_STG_STATUS_FAILURE
			exit function
		end if
	#endif	
	settings_restore_def=EN_STG_STATUS_OK
end function


'--------------------------------------------------------------------------------
public function setting_get(byref stg_name as string, index as byte) as string 
'High- level function to extract setting value. It sits on top of the setting_sg() and does the
'following: (1) if setting is OK then setting_get() just returns its value, (2) if setting is invalid
'then default value is returned instead and setting_error_detected procedure is called,
'(3) if the setting is not found then empty string is returned.
'Setting_error_detected procedure is not a part of this library, so it must be implemented elsewhere. 
'The following applies only when USE_STG_TIMESTAMP<>0 (see settings.tbh):
'The stg_timestamp will contain the timestamp of the setting after the setting_sg() call.


	dim s as string
	dim status as en_stg_status

	status=setting_sg(stg_name,index,s,EN_STG_GET)
	select case status
	case EN_STG_STATUS_OK:
		setting_get = s
		exit function
	case EN_STG_STATUS_UNKNOWN:
		setting_get=""
		setting_error_detected()
	case else:
		setting_get_def(stg_name,index,s)
		setting_get = s
		setting_error_detected()
	end select

end function

'--------------------------------------------------------------------------------
public sub setting_set(byref stg_name as string, index as byte, byref stg_value as string) 
'High- level function to set setting value. It sits on top of the setting_sg()
'Calls setting_error_detected() when there is a problem
	dim status as en_stg_status

	status=setting_sg(stg_name,index,stg_value,EN_STG_SET)
	if status<>EN_STG_STATUS_OK then
		setting_error_detected
	end if

end sub

'--------------------------------------------------------------------------------
public function setting_sg(byref stg_name as string,index as byte,byref stg_value as string,op as en_stg_rdwr) as en_stg_status
	dim pre_read_value as string(MAX_SETTING_VALUE_LEN)'<<<<<<<<<<<<<,

	if op=EN_STG_GET then
		setting_sg=setting_sg_internal(stg_name,index,stg_value,EN_STG_GET)
		if setting_sg<>EN_STG_STATUS_OK then exit function
		
		'<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		pre_read_value=setting_pre_read(stg_name,index,stg_value)
		if stg_value<>pre_read_value then
			stg_value=pre_read_value
			setting_sg=setting_sg_internal(stg_name,index,stg_value,EN_STG_SET)
		end if
		'<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	else
		setting_sg=setting_sg_internal(stg_name,index,stg_value,EN_STG_SET)
		setting_post_write(stg_name,index,stg_value) '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	end if

end function

'--------------------------------------------------------------------------------
public function setting_sg_internal(byref stg_name as string,index as byte,byref stg_value as string,op as en_stg_rdwr) as en_stg_status
'Reads/writes setting stg_name, value is exchanged through stg_value. Read or write operation is
'determined by op. Returns various en_stg_status status codes.
'The following applies only when USE_STG_TIMESTAMP<>0 (see settings.tbh):
'For SETs, the timestamp of the setting is updated with the value from stg_timestamp (global struct).
'For GETs, the stg_timestamp will contain the timestamp of the setting after the setting_sg() call.
'NEW: index=255 will set all members of the setting to the supplied value. This saves time during initialization.
'We can use index=255 for this because there may never be 255 members of the setting. Even when the timestamp is off,
'and the setting is of the BYTE type we need one byte for the checksum, so we can only have 254 members!
	
	dim x,cs,f as byte
	dim i as word
	dim stg_str as string
	dim new_member_str as string(MAX_SETTING_VALUE_LEN)
	dim num as byte
	dim ts_str as string(STG_TIMESTAMP_LENGTH)
	#if STORAGE_MEMORY<>0
		dim fd_status as pl_fd_status_codes
	#endif
	
	#if STORAGE_MEMORY<>0
		fd.filenum=settings_filenum
	#endif
	
	setting_sg_internal=load_setting_data(stg_name,num,stg_str)
	if setting_sg_internal<>EN_STG_STATUS_OK then
		exit function
	end if

	'is index valid?
	if index>=sdr(num).members and index<>255 then
		'invalid index
		setting_sg_internal=EN_STG_STATUS_INVALID_INDEX
		exit function
	end if

	'is this a read or a write?
	if op=EN_STG_GET then
		'READ OPERATION
		'verify the checksum
		cs=strsum(left(stg_str,len(stg_str)-1))
		if cs<>asc(right(stg_str,1)) then
			setting_sg_internal=EN_STG_STATUS_FAILURE	'invalid checksum
			exit function
		end if
		
		'handle the timestamp
		#if USE_STG_TIMESTAMP<>0
			ts_str=mid(stg_str,len(stg_str)-STG_TIMESTAMP_LENGTH,STG_TIMESTAMP_LENGTH)
			stg_timestamp.ts_daycount=256*asc(mid(ts_str,1,1))+asc(mid(ts_str,2,1))
			stg_timestamp.ts_mincount=256*asc(mid(ts_str,3,1))+asc(mid(ts_str,4,1))
			stg_timestamp.ts_seconds=asc(mid(ts_str,5,1))
			stg_timestamp.ts_milsec=256*asc(mid(ts_str,6,1))+asc(mid(ts_str,7,1))
		#endif

		'extract target member
		stg_str=mid(stg_str,index*sdr(num).member_size+1,sdr(num).member_size)	
				
		'make sure this member has a valid value
		select case chr(sdr(num).stype)
		case "B":	'byte- convert into value
			i=asc(stg_str)
			stg_value=str(i)
			goto lb1
						
		case "W":	'word- convert into value
			i=asc(left(stg_str,1))*256+asc(mid(stg_str,2,1))
			stg_value=str(i)
			goto lb1

		case "S":	'string- take length
			stg_value=mid(stg_str,2,asc(left(stg_str,1)))
			i=asc(left(stg_str,1))
			goto lb1
					
		case else:	'dot-decimal string- take length
			stg_value=ddstr(mid(stg_str,2,asc(left(stg_str,1))))
			i=asc(left(stg_str,1))
lb1:		if i<sdr(num).p1 or i>sdr(num).p2 then
				setting_sg_internal=EN_STG_STATUS_INVALID	'invalid checksum
				exit function
			end if
		end select		

		'OK, so this member's value is OK and the stg_value is already set to it!
		setting_sg_internal=EN_STG_STATUS_OK
		exit function
	
	else
		'WRITE OPERATION
		
		'Branch according to the setting type and verify new value
		select case chr(sdr(num).stype)
		case "B":	'byte- convert into value
			i=val(stg_value)
			new_member_str=chr(i)
			goto lb2
						
		case "W":	'word- convert into value
			i=val(stg_value)
			x=i/256
			new_member_str=chr(x)+chr(i-x*256)
			goto lb2

		case "S":	'string
			new_member_str=chr(len(stg_value))+stg_value
			i=len(new_member_str)-1
			goto lb2
					
		case else:	'dot-decimal string- take length
			new_member_str=ddval(stg_value)
			new_member_str=chr(len(new_member_str))+new_member_str
			i=len(new_member_str)-1
lb2:		if i<sdr(num).p1 or i>sdr(num).p2 then
				setting_sg_internal=EN_STG_STATUS_INVALID	'invalid checksum
				exit function
			end if
		
		end select		

		'insert new member value into the setting data
		if index<>255 then
			'regular save of a single member
			insert(stg_str,index*sdr(num).member_size+1,new_member_str)
		else
			'set all members to the same value
			for f=0 to sdr(num).members-1
				insert(stg_str,f*sdr(num).member_size+1,new_member_str)
			next f
		end if
		
		#if USE_STG_TIMESTAMP<>0
			ts_str=chr(stg_timestamp.ts_daycount/256)
			ts_str=ts_str+chr(stg_timestamp.ts_daycount and &hFF)
			ts_str=ts_str+chr(stg_timestamp.ts_mincount/256)
			ts_str=ts_str+chr(stg_timestamp.ts_mincount and &hFF)
			ts_str=ts_str+chr(stg_timestamp.ts_seconds)
			ts_str=ts_str+chr(stg_timestamp.ts_milsec/256)
			ts_str=ts_str+chr(stg_timestamp.ts_milsec and &hFF)
			insert(stg_str,len(stg_str)-STG_TIMESTAMP_LENGTH+1-1,ts_str) '-1 because of checksum field in the end 
		#endif
		
		'recalculate the checksum
		stg_str=left(stg_str,len(stg_str)-1)
		cs=strsum(stg_str)
		stg_str=stg_str+chr(cs)

		if sdr(num).storage=`E` then
			'store the data into the NV MEM
			#if STORAGE_MEMORY=0
				if stor.setdata(stg_str,sdr(num).nvaddr)<>len(stg_str) then
					setting_sg_internal=EN_STG_STATUS_FAILURE
					exit function
				end if
			#else
				fd_status=fd.setpointer(sdr(num).nvaddr)
				if fd_status<>PL_FD_STATUS_OK then
					setting_sg=EN_STG_STATUS_FAILURE
					exit function
				end if
				
				fd_status=fd.setdata(stg_str)
				if fd_status<>PL_FD_STATUS_OK then
					setting_sg_internal=EN_STG_STATUS_FAILURE
					exit function
				end if
			
				if suspend_flushing=NO then
					fd.flush
				end if	
			#endif
		else
			'store the data into the RAM array
			ramarr_setdata(stg_str,sdr(num).nvaddr)
			setting_sg_internal=EN_STG_STATUS_OK
		end if
	end if

	'completed successfully!
	setting_sg_internal=EN_STG_STATUS_OK
end function

'--------------------------------------------------------------------------------
#if USE_STG_TIMESTAMP<>0
public function setting_set_ts(byref stg_name as string) as en_stg_status
'Writes the timestamp of the setting without changing its value. The timestamp is passed in a
'global stg_timestamp structure (the reason we don't use a function argument is because all other
'procedures in this library use the stg_timestamp, so we do this for uniformity).
	
	dim x,cs as byte
	dim num as byte
	dim stg_str as string
	dim ts_str as string(STG_TIMESTAMP_LENGTH)
	#if STORAGE_MEMORY<>0
		dim fd_status as pl_fd_status_codes
	#endif

	#if STORAGE_MEMORY<>0
		fd.filenum=settings_filenum
	#endif

	setting_set_ts=load_setting_data(stg_name,num,stg_str)
	if setting_set_ts<>EN_STG_STATUS_OK then
		exit function
	end if
	
	'verify the checksum
	cs=strsum(left(stg_str,len(stg_str)-1))
	if cs<>asc(right(stg_str,1)) then
		setting_set_ts=EN_STG_STATUS_FAILURE	'invalid checksum
		exit function
	end if
	
	stg_str=left(stg_str,len(stg_str)-STG_TIMESTAMP_LENGTH-1) 'cut off the timestamp and checksum

	'set new timestamp
	ts_str=chr(stg_timestamp.ts_daycount/256)
	ts_str=ts_str+chr(stg_timestamp.ts_daycount and &hFF)
	ts_str=ts_str+chr(stg_timestamp.ts_mincount/256)
	ts_str=ts_str+chr(stg_timestamp.ts_mincount and &hFF)
	ts_str=ts_str+chr(stg_timestamp.ts_seconds)
	ts_str=ts_str+chr(stg_timestamp.ts_milsec/256)
	ts_str=ts_str+chr(stg_timestamp.ts_milsec and &hFF)
	stg_str=stg_str+ts_str	

	'calculate checksum and add this checksum to the data
	cs=strsum(stg_str)
	stg_str=stg_str+chr(cs)


	if sdr(num).storage=`E` then
		'store the data into the NV MEM
		#if STORAGE_MEMORY=0
			if stor.setdata(stg_str,sdr(num).nvaddr)<>len(stg_str) then
				setting_set_ts=EN_STG_STATUS_FAILURE
				exit function
			end if
		#else
			
			fd_status=fd.setpointer(sdr(num).nvaddr)
			if fd_status<>PL_FD_STATUS_OK then
				setting_set_ts=EN_STG_STATUS_FAILURE
				exit function
			end if
			
			fd_status=fd.setdata(stg_str)
			if fd_status<>PL_FD_STATUS_OK then
				setting_set_ts=EN_STG_STATUS_FAILURE
				exit function
			end if
		
			if suspend_flushing=NO then
				fd.flush
			end if	
		#endif
	else
		'store the data into the RAM array
		ramarr_setdata(stg_str,sdr(num).nvaddr)
		setting_set_ts=EN_STG_STATUS_OK
	end if
	
	'completed successfully!
	setting_set_ts=EN_STG_STATUS_OK
end function
#endif

'--------------------------------------------------------------------------------
function load_setting_data(byref stg_name as string,byref num as byte,byref stg_str as string) as en_stg_status
'Converts setting name (stg_name) into setting number (num), also loads the entire setting (all members, timestamp,
'checksum) into the stg_str

	#if STORAGE_MEMORY<>0
		dim fd_status as pl_fd_status_codes
	#endif
	
	#if STORAGE_MEMORY<>0
		fd.filenum=settings_filenum
	#endif
	
	'does this setting exist?
	num=setting_find(stg_name)
	if num=0 then
		'unknown setting
		load_setting_data=EN_STG_STATUS_UNKNOWN
		exit function
	end if
	num=num-1

	'no matter read or write, we read the entire setting first (all members, checksum, timestamp if enabled)
	if sdr(num).storage=`E` then
		#if STORAGE_MEMORY=0
			stg_str=stor.getdata(sdr(num).nvaddr,sdr(num).setting_size)
		#else
			fd_status=fd.setpointer(sdr(num).nvaddr)
			if fd_status<>PL_FD_STATUS_OK then
				load_setting_data=EN_STG_STATUS_FAILURE
				exit function
			end if
			stg_str=fd.getdata(sdr(num).setting_size)
			if fd.laststatus<>PL_FD_STATUS_OK then
				load_setting_data=EN_STG_STATUS_FAILURE
				exit function
			end if
		#endif
	else
		stg_str=ramarr_getdata(sdr(num).nvaddr,sdr(num).setting_size)
		load_setting_data=EN_STG_STATUS_OK
	end if

	load_setting_data=EN_STG_STATUS_OK	
end function

'--------------------------------------------------------------------------------
public function setting_get_def(byref stg_name as string,index as byte,byref def_value as string) as en_stg_status
'Extracts default value of specified setting. This got nothing to do with the NV MEM- the value
'is taken from the setting descriptor (setting.txt file). Default value is retured through def_value.
'Returns various en_stg_status status codes.

	dim num as byte
	dim pos,pos2 as integer
	dim s as string
	
	romfile.open(SETTINGS_SCRIPT_FILE)
	
	num=setting_find(stg_name)
	if num=0 then
		'unknown setting
		setting_get_def=EN_STG_STATUS_UNKNOWN
		exit function
	end if
	num=num-1
	
	'get default value field
	romfile.pointer=sdr(num).romaddr_def
	pos=romfile.find(romfile.pointer,chr(STG_END_OF_LINE),1)
	pos2=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1)
	if pos2>0 and pos2<pos then
		pos=pos2
	end if
	s=romfile.getdata(pos-romfile.pointer)
	
	pos=instr(1,s,"~",1)
	while pos<>0 and index>0
		s=right(s,len(s)-pos)
		pos=instr(1,s,"~",1)
		index=index-1
	wend
	pos=instr(1,s,"~",1)
	if pos>0 then s=left(s,pos-1)
	if s="^" then def_value="" else def_value=s

	'completed successfully!
	setting_get_def=EN_STG_STATUS_OK
end function

'--------------------------------------------------------------------------------
public function setting_get_num_members(byref stg_name as string, byref num_members as byte) as en_stg_status
'Returns the total number of member values in this setting (through num_members)

	dim num as byte

	romfile.open(SETTINGS_SCRIPT_FILE)
	
	num=setting_find(stg_name)
	if num=0 then
		'unknown setting
		setting_get_num_members=EN_STG_STATUS_UNKNOWN
		exit function
	end if
	num=num-1
	
	'get the number of members
	num_members=sdr(num).members 

	'completed successfully!
	setting_get_num_members=EN_STG_STATUS_OK
end function

'--------------------------------------------------------------------------------
public function setting_find(byref stg_name as string(2)) as byte
'if stg_name starts with an alpha, then assumes that the setting name was supplied and
'looks for the setting with this name. If the name starts with digit then assumes it is a setting
'number. In both cases returns member number+1 if found, or 0 if not found.

	dim f as byte
	
	f=asc(stg_name)
	if f>=&h30 and f<=&h39 then
		f=val(stg_name)
		if f<num_stg then
			setting_find=f+1
			exit function
		end if
	else
		for f=0 to num_stg-1
			if sdr(f).name=stg_name then
				setting_find=f+1
				exit function
			end if
		next f
	end if
	setting_find=0
end function

'--------------------------------------------------------------------------------
public function ramarr_setdata(byref datatoset as string,startaddr as word) as byte
	dim f as byte
	
	for f=0 to len(datatoset)-1
		stg_ram_array(f+startaddr)=asc(mid(datatoset,f+1,1))
		'stg_ram_array(f+startaddr,asc(mid(datatoset,f+1,1))) <<<< incorred and generates internal compiler error
	next f

	ramarr_setdata=len(datatoset)
end function

'--------------------------------------------------------------------------------
public function ramarr_getdata(startaddr as word,len as byte) as string
	dim f as byte
	
	ramarr_getdata=""
	for f=0 to len-1
		ramarr_getdata=ramarr_getdata+chr(stg_ram_array(f+startaddr))
	next f
end function
