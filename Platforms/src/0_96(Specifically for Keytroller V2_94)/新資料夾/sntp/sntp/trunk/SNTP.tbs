'***********************************************************************************************************
'			 SNTP LIBARAY (SIMPLE NETWORK TIME PROTOCOL) THIS CODE CAN OBTAIN TIME FROM SNTP SERVER
'
'	IP for some of the Time Servers changes sometimes, so we suggest using DNS to obtain your Time Server IP.
'	When the Query is sent to the Time Server, Server returns the amount of seconds from 1st Jan, 1900 00:00:00
'	to now.  This is called 64bits Timestamp format
'***********************************************************************************************************
include "global.tbh"

dim sntp_retry_ctr as byte
dim sntp_reply_timer as byte
dim sntp_server_ip as string(16)
dim sntp_server_port as word
public dim sntp_state as en_sntp_states

'============================================================= 

'------------------------------------------------------------------------------
public sub setup_sntp(byref server_ip as string(16),server_port as word)
	sntp_server_ip=server_ip
	if server_port<>"" then
		sntp_server_port=server_port
	else
		sntp_server_port=123
	end if
end sub

'------------------------------------------------------------------------------
sub sntp_init()
'Initialize the sock for SNTP connection
	sock.num=SOCK_SNTP
	sock.txbuffrq(1)
	sock.rxbuffrq(1)
	sys.buffalloc
	sock.protocol=PL_SOCK_PROTOCOL_UDP
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.reconmode=PL_SOCK_RECONMODE_3
	sock.gendataarrivalevent=NO
	sntp_reply_timer=0
	sntp_retry_ctr=SNTP_RETRY
end sub

'------------------------------------------------------------------------------
sub convert_to_time(wMSW as word,	'most significant word
	wLSW as word,				'least significant word
	byref wDayCount as word,	'day count from 1st of Jan 1900
	byref wMinCount as word,	'minute count from 00:00
	byref bSec as byte			'seconds
	)	
'Take 4 bytes value from sock, which is the amount of seconds from 1st of Jan 1900 00:00:00 to now
'convert this value into days,hours,mins,secs. 
	dim wRemain,wFactor,wTemp,wTemp1,wTemp2,wTemp3 as word
	dim wDays,wMinus,wSeconds as word
	dim i,j as integer

	wRemain=0
	wFactor=0
	wTemp1=0
	wTemp2=0
	wTemp3=0

	wRemain=wMSW mod 24
	wFactor=wMSW/24
	wDays=wFactor * 18
	wTemp1=0
	 
	for i=1 to wFactor
		wTemp1=wTemp1 + 736
		if wTemp1 > 3600 then 
			wDays=wDays + 1
			wTemp1=wTemp1 - 3600
		end if
	next i 
	for j=1 to 18
		wTemp2=wTemp2 + wRemain
		if wTemp2 > 24 then
			wDays=wDays + 1
			wTemp2=wTemp2 -24
		end if
	next j
	
	'Put wTemp1 into Minutes and Seconds
	wTemp3=wRemain * 736
	wTemp=wTemp1/60
	wMinus=wTemp * 24
	
	'put wTemp2 into Minutes and Seconds
	wSeconds=(wTemp1 mod 60) * 24
	wMinus=wMinus + wTemp2 * 60
	
	'put wTemp3 into Minutes and Seconds
	wMinus=wMinus + wTemp3/60
	wSeconds=wSeconds + (wTemp3 mod 60) 
	
	'Add wLSW to Minutes and seconds
	wMinus=wMinus + wLSW/60
	wSeconds=wSeconds + (wLSW mod 60)
	
	'redistribute seconds to days.
	wMinus=wMinus + wSeconds/60
	bSec=wSeconds mod 60	
	
	wMinCount=wMinus mod 1440
	wDayCount=wDays+(wMinus/1440)+ 1-36525 			'+1 because it counts start from 1st of January, (that is starting from 1)

end sub


'------------------------------------------------------------------------------
sub get_sntp_time(byref wDays as word,byref wMinus as word,byref bSeconds as byte)
'extract the time from the rx buff
	dim wMSW as word
	dim wLSW as word
	dim b1 as byte
	dim b2 as byte
	dim b3 as byte
	dim b4 as byte
	dim s as string
	
	sock.num=SOCK_SNTP
	sock.nextpacket
	s=sock.getdata(255)
	b1=asc(mid(s,41,1)) 'the time is in a 4 byte format, (64bits Timestamp format)
	b2=asc(mid(s,42,1))
	b3=asc(mid(s,43,1))
	b4=asc(mid(s,44,1))
	wMSW=b1 * 256 + b2
	wLSW=b3 * 256 + b4
	convert_to_time(wMSW, wLSW,wDays,wMinus,bSeconds)	'call convert_to_time, to convert the 64bits timestamp into daycount, mincount, sec
	if len(s)=48 then
		sntp_state=SNTP_STATE_SUCCESS
	else
		if sntp_retry_ctr=0 then
			sntp_state=SNTP_STATE_FAILED
		else
			sntp_retry_ctr=sntp_retry_ctr-1
			sntp_state=SNTP_STATE_CONNECTING
		end if	
	end if
end sub

'------------------------------------------------------------------------------
sub sntp_query()
'send query for time base to the time server
	sock.num=SOCK_SNTP
	if sock.rxlen>0 then
		sntp_state=SNTP_STATE_REPLIED
	else
		if sntp_retry_ctr=0 then
			sntp_state=SNTP_STATE_FAILED
		else
			if sntp_reply_timer>0 then
				sntp_reply_timer=sntp_reply_timer-1
			else 
				sntp_retry_ctr=sntp_retry_ctr-1
				sntp_state=SNTP_STATE_CONNECTING
			end if
			
		end if
	end if
end sub

'------------------------------------------------------------------------------
sub connect_to_time_server()
'Connect to SNTP Time Server specified by sntp_server_ip, at sntp_server_port.
	dim s as string
	sock.num=SOCK_SNTP
	if sock.statesimple<>PL_SSTS_EST then
		if sntp_reply_timer=0 then
			sntp_reply_timer=SNTP_WAIT_REPLY
			sock.targetport=sntp_server_port
			sock.targetip=sntp_server_ip 
			sock.connect
		else
			if sntp_retry_ctr=0 then
				sntp_state=SNTP_STATE_FAILED
			else
				if sntp_reply_timer>0 then
					sntp_reply_timer=sntp_reply_timer-1
				else 
					sntp_retry_ctr=sntp_retry_ctr-1
				end if
			end if
		end if
	else
		s=chr(&h0b)+strgen(47,chr(&h0))
		sock.setdata(s)
		sock.send
		sntp_state=SNTP_STATE_QUERY
		sntp_reply_timer=SNTP_WAIT_REPLY
	end if
end sub

'------------------------------------------------------------------------------
sub sntp_release_buffer()
	sock.num=SOCK_SNTP
	sock.inconmode=PL_SOCK_INCONMODE_NONE
	sock.reset()
	while sock.statesimple<>PL_SSTS_CLOSED
	wend
	sock.txbuffrq(0)
	sock.rxbuffrq(0)
	sys.buffalloc		
end sub

'------------------------------------------------------------------------------
public sub sntp_request(byref wDays as word,byref wMinus as word,byref bSeconds as byte)
	select case sntp_state
	case SNTP_STATE_INIT:
		sntp_init()
		sntp_state=SNTP_STATE_CONNECTING
	case SNTP_STATE_CONNECTING:
		connect_to_time_server()
	case SNTP_STATE_QUERY:
		sntp_query()
	case SNTP_STATE_REPLIED:
		get_sntp_time(wDays,wMinus,bSeconds)
	case SNTP_STATE_SUCCESS: 
		sntp_release_buffer()
		sntp_state=SNTP_STATE_COMPLETE
	case SNTP_STATE_FAILED:
		sntp_release_buffer()
		sntp_state=SNTP_STATE_COMPLETE
	case SNTP_STATE_COMPLETE:
	end select
end sub