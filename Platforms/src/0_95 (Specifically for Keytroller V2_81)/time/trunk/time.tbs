'***********************************************************************************************************
'			TIME DATA TYPE CONVERTING AND FORMATING
'***********************************************************************************************************
'Get and set the time, converting time between values and actual date and time, format the date and time
'with or without time zone offset.

include "global.tbh"

'------------------------------------------------------------------------------
public dim time_tz_offset as string(2) 'Time Zone Off Set, You will need to change this according to your time zone
public dim time_convert_err as ok_ng
public dim time_format_err as ok_ng
'=========================================================================
sub time_get_tzone_offset(byref hour_off_set as byte,byref min_off_set as byte)
'depends on the time_tz_offset, return the actual time offset in hours and minutes.

	select case time_tz_offset
	case 0:
		hour_off_set=12
		min_off_set=0
	case 1:
		hour_off_set=11
		min_off_set=0
	case 2: 
		hour_off_set=10
		min_off_set=0
	case 3:
		hour_off_set=9
		min_off_set=0
	case 4:
		hour_off_set=8
		min_off_set=0
	case 5:
		hour_off_set=7
		min_off_set=0
	case 6:
		hour_off_set=6
		min_off_set=0
	case 7:
		hour_off_set=5
		min_off_set=0
	case 8:
		hour_off_set=4
		min_off_set=30
	case 9:
		hour_off_set=4
		min_off_set=0
	case 10:
		hour_off_set=3 
		min_off_set=30
	case 11:
		hour_off_set=3
		min_off_set=0
	case 12:
		hour_off_set=2
		min_off_set=0
	case 13:
		hour_off_set=1
		min_off_set=0
	case 14:
		hour_off_set=0
		min_off_set=0
	case 15:
		hour_off_set=1
		min_off_set=0
	case 16:
		hour_off_set=2
		min_off_set=0
	case 17:
		hour_off_set=3
		min_off_set=0
	case 18:
		hour_off_set=3
		min_off_set=30
	case 19:
		hour_off_set=4
		min_off_set=0
	case 20:
		hour_off_set=4 
		min_off_set=30
	case 21:
		hour_off_set=5
		min_off_set=0
	case 22:
		hour_off_set=5
		min_off_set=30
	case 23:
		hour_off_set=5
		min_off_set=45
	case 24:
		hour_off_set=6
		min_off_set=0
	case 25:
		hour_off_set=6
		min_off_set=30
	case 26:
		hour_off_set=7
		min_off_set=0
	case 27:
		hour_off_set=8 
		min_off_set=0
	case 28:
		hour_off_set=9
		min_off_set=0
	case 29:
		hour_off_set=9
		min_off_set=30
	case 30:
		hour_off_set=10
		min_off_set=0
	case 31:
		hour_off_set=11	
		min_off_set=0
	case 32:
		hour_off_set=12
		min_off_set=0
	case 33:
		hour_off_set=13
		min_off_set=0
	end select
end sub

'------------------------------------------------------------------------------
sub time_time_to_str(byref ts_str as string(14),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)

	time_year_str=str(year(time_daycount)+2000)
	time_month_str=str(month(time_daycount))
	time_date_str=str(date(time_daycount))
	time_hour_str=str(hours(time_mincount))
	time_minute_str=str(minutes(time_mincount))
	time_second_str=str(time_second_byte)

	if len(time_hour_str) < 2 then 
		time_hour_str="0"+time_hour_str 
	end if
	if len(time_minute_str) < 2 then 
		time_minute_str="0"+time_minute_str 
	end if
	if len(time_second_str) < 2 then 
		time_second_str="0"+time_second_str 
	end if
	if len(time_date_str) < 2 then 
		time_date_str="0"+time_date_str 
	end if
	if len(time_month_str) < 2 then 
		time_month_str="0"+time_month_str 
	end if
	ts_str=time_year_str+time_month_str+time_date_str+time_hour_str+time_minute_str+time_second_str
end sub

'------------------------------------------------------------------------------
sub time_str_to_time(byref ts_str as string(14),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte)
	dim time_year, time_month,time_date,time_hour,time_min as byte
	dim time_year_str, time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(4)
	
	time_year_str=left(ts_str,4)
	time_month_str=mid(ts_str,5,2)
	time_date_str=mid(ts_str,7,2)
	time_hour_str=mid(ts_str,9,2)
	time_minute_str=mid(ts_str,11,2)
	time_second_str=mid(ts_str,13,2)
	time_year=val(time_year_str)-2000
	time_month=val(time_month_str)
	time_date=val(time_date_str)
	time_daycount=daycount(time_year,time_month,time_date)
	if time_daycount=65535 then 
		time_convert_err=NG
		exit sub
	end if
	time_hour=val(time_hour_str)
	time_min=val(time_minute_str)
	time_mincount=mincount(time_hour,time_min)
	if time_mincount=65535 then
		time_convert_err=NG
		exit sub
	end if	
	time_second_byte=val(time_second_str)
	if time_second_byte>59 then time_convert_err=NG
end sub

'------------------------------------------------------------------------------
sub time_time_to_bytestr(
	byref ts_str as string(14),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte
	)
	ts_str=chr(time_daycount/256)
	ts_str=ts_str+chr(time_daycount and &hFF)
	ts_str=ts_str+chr(time_mincount/256)
	ts_str=ts_str+chr(time_mincount and &hFF)
	ts_str=ts_str+chr(time_second_byte)				
end sub

'------------------------------------------------------------------------------
sub time_bytestr_to_time(
	byref ts_str as string(14),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte
	)
	time_daycount=256*asc(mid(ts_str,1,1))+asc(mid(ts_str,2,1))
	time_mincount=256*asc(mid(ts_str,3,1))+asc(mid(ts_str,4,1))
	time_second_byte=asc(mid(ts_str,5,1))
end sub

'------------------------------------------------------------------------------
public sub time_type_convert(
	byref ts_str as string(14),	
	byref time_daycount as word,
	byref time_mincount as word,
	byref time_second_byte as byte, 
	convert_dir as time_convert_dir	
	)
'Convert time format, between string(YYYYMMDDhhmmss), and values(daycount, mincout and sec), and value string(values in a 5 bytes asciix string)
'Ex. BYTESTR_TO_TIME: user have to supply Daycount, MinCount, and second, the function returns 5 bytes time value (2bytes of daycounts, 2bytes of mincounts, and 1byte of second in ts_str.)
'TIME_TO_BYTESTR: reverse of BYTESTR_TO_TIME
'STR_TO_TIME: convert a time string in ts_str, to daycounts, mincounts and seconds
'TIME_TO_STR: reverse of STR_TIME
	time_convert_err=OK
	select case convert_dir
	case TIME_TO_STR:
		if time_daycount>36524 or time_mincount>1439 or time_second_byte>59 then
			time_convert_err=NG
			exit sub
		end if
		time_time_to_str(ts_str,time_daycount,time_mincount,time_second_byte)
	case STR_TO_TIME:
		time_str_to_time(ts_str,time_daycount,time_mincount,time_second_byte)
	case TIME_TO_BYTESTR:
		if time_daycount>36524 or time_mincount>1439 or time_second_byte>59 then
			time_convert_err=NG
			exit sub
		end if	
		time_time_to_bytestr(ts_str,time_daycount,time_mincount,time_second_byte)
	case BYTESTR_TO_TIME:
		time_bytestr_to_time(ts_str,time_daycount,time_mincount,time_second_byte)
	case STR_TO_BYTESTR:
		time_str_to_time(ts_str,time_daycount,time_mincount,time_second_byte)
		if time_convert_err=NG then exit sub
		time_time_to_bytestr(ts_str,time_daycount,time_mincount,time_second_byte)
	case BYTESTR_TO_STR:
		time_bytestr_to_time(ts_str,time_daycount,time_mincount,time_second_byte)
		if time_daycount>36524 or time_mincount>1439 or time_second_byte>59 then
			time_convert_err=NG
			exit sub
		end if		
		time_time_to_str(ts_str,time_daycount,time_mincount,time_second_byte)
	end select
end sub

'=========================================================== 
public function clock_set_time(time_year_str as string(4), time_month_str as string(2), time_date_str as string(2), time_hour_str as string(2), time_minute_str as string(2), time_second_str as string(2), TZ_time as no_yes) as boolean
'Set the rtc value according to the function parameters
	dim time_sys_sec,time_year,time_month,time_date,time_hour,time_min as byte
	dim time_sys_daycount, time_sys_mincount as word
	device_rtc_get(time_sys_daycount,time_sys_mincount,time_sys_sec)
	if len(time_year_str)=0 then time_year_str=str(year(time_sys_daycount)+2000)
	if len(time_month_str)=0 then time_month_str=str(month(time_sys_daycount))
	if len(time_date_str)=0 then time_date_str=str(date(time_sys_daycount))
	if len(time_hour_str)=0 then time_hour_str=str(hours(time_sys_mincount))
	if len(time_minute_str)=0 then time_minute_str=str(hours(time_sys_mincount))
	if len(time_second_str)=0 then time_second_str=str(time_sys_sec)

	if val(time_year_str) < 2000 or val(time_year_str) > 2099 then
		goto fail
	else
		time_year=val(time_year_str)-2000
	end if
	time_month=val(time_month_str)
	time_date=val(time_date_str)
	time_sys_daycount=daycount(time_year,time_month,time_date)	
	
	time_hour=val(time_hour_str)
	time_min=val(time_minute_str)
	time_sys_mincount=mincount(time_hour,time_min)
	
	time_sys_sec=val(time_second_str)

	if time_sys_daycount=65535 or time_sys_mincount=65535 or time_sys_sec > 59 then
fail:		
		clock_set_time=false
		exit function
	else
		if TZ_time=no then
			device_rtc_set(time_sys_daycount,time_sys_mincount,time_sys_sec)
		else
			time_ztime_set(time_sys_daycount,time_sys_mincount,time_sys_sec)
		end if
		clock_set_time=true
	end if
end function

'------------------------------------------------------------------------------ 
public sub time_ztime_get(byref rtc_days as word, byref rtc_minutes as word, byref rtc_secs as byte)
'this function returns the actual date and time, after taking account of the time zone.
	dim wtemp, wtemp1 as word
	dim hour_off_set, min_off_set as byte
	time_get_tzone_offset(hour_off_set, min_off_set)
	
	device_rtc_get(rtc_days,rtc_minutes,rtc_secs)
	
	wtemp=(hour_off_set * 60) + min_off_set
	if val(time_tz_offset) < 14 then
		if rtc_minutes < wtemp then
			rtc_days=rtc_days - 1 
			wtemp1=1439 - wtemp
			rtc_minutes=rtc_minutes + wtemp1 + 1
		else
 			rtc_minutes=rtc_minutes-wtemp
 		end if	
	end if
	if val(time_tz_offset) > 14 then
		wtemp1=1439 - wtemp
		if rtc_minutes > wtemp1 then
			rtc_days=rtc_days + 1
			rtc_minutes=rtc_minutes - wtemp1 - 1
		else 
			rtc_minutes=rtc_minutes + wtemp
		end if 
	end if	
	
end sub
'------------------------------------------------------------------------------ 
public sub time_ztime_set(byref rtc_days as word, byref rtc_minutes as word, byref rtc_secs as byte) 
'The function convert the time back to
	dim wtemp, wtemp1 as word
	dim hour_off_set, min_off_set as byte
	time_get_tzone_offset(hour_off_set, min_off_set)
	
	wtemp=(hour_off_set * 60) + min_off_set
	
	if val(time_tz_offset) > 14 then
		wtemp1=1439 - wtemp
		if rtc_minutes > wtemp1 then
			rtc_days=rtc_days + 1
			rtc_minutes=rtc_minutes - wtemp1 - 1
		else 
			rtc_minutes=rtc_minutes + wtemp
		end if 
	end if
	if val(time_tz_offset) < 14 then
		if rtc_minutes < wtemp then
			rtc_days=rtc_days - 1 
			wtemp1=1439 - wtemp
			rtc_minutes=rtc_minutes + wtemp1 + 1
		else
 			rtc_minutes=rtc_minutes-wtemp
 		end if
	end if
	device_rtc_set(rtc_days,rtc_minutes,rtc_secs)
end sub

'------------------------------------------------------------------------------
public sub time_style_format(byref time_string as string(23), style as byte, op as en_time_rdwr)
'add separaters into a consequtive time string (ex. 20000101000000 -> 2000-01-01 00:00:00) and reverse
'[0:YYYYMMDD -> YYYY-MM-DD]
'[1:YYYYMMDDhhmm -> YYYY-MM-DD hh:mm]
'[2:YYYYMMDDhhmmss -> YYYY-MM-DD hh:mm:ss]
'[3:YYYYMMDDhhmmssmls -> YYYY-MM-DD hh:mm:ss.mls]
'[4:hhmm -> hh:mm]
'[5:hhmmss -> hh:mm:ss]
'[6:hhmmssmls -> hh:mm:ss.mls]
'[7:YYYYMMDD->DD-MM-YYYY]
'[8:YYYYMMDD->MM-DD-YYYY]

	dim length, pos1, pos2, pos3, pos4 as byte
	dim time_year_str as string(4)
	dim time_ms_str as string(3)
	dim time_month_str, time_date_str, time_hour_str, time_minute_str, time_second_str as string(2)
	time_format_err=OK
	time_year_str=""
	time_month_str=""
	time_date_str=""
	time_hour_str=""
	time_minute_str=""
	time_second_str=""
	time_ms_str=""	
	if op=TIME_GET then
		select case style
		case 0,1,2,3:
			time_year_str=left(time_string,4)
			time_month_str=mid(time_string,5,2)
			time_date_str=mid(time_string,7,2)
			time_hour_str=mid(time_string,9,2)
			time_minute_str=mid(time_string,11,2)
			time_second_str=mid(time_string,13,2)
			time_ms_str=mid(time_string,15,3)
		case 4,5,6:
			time_hour_str=left(time_string,2)
			time_minute_str=mid(time_string,3,2)
			time_second_str=mid(time_string,5,2)
			time_ms_str=mid(time_string,7,2)
		case 7,8:
			time_year_str=left(time_string,4)
			time_month_str=mid(time_string,5,2)
			time_date_str=mid(time_string,7,2)			
		end select

		select case style
		case 0: 'YYYY-MM-DD
			if len(time_string)<>8 then time_format_err=NG
			time_string=time_year_str+"-"+time_month_str+"-"+time_date_str
		case 1:	'YYYY-MM-DD hh:mm
			if len(time_string)<>12 then time_format_err=NG
			time_string=time_year_str+"-"+time_month_str+"-"+time_date_str+" "+time_hour_str+":"+time_minute_str
		case 2: 'YYYY-MM-DD hh:mm:ss
			if len(time_string)<>14 then time_format_err=NG
			time_string=time_year_str+"-"+time_month_str+"-"+time_date_str+" "+time_hour_str+":"+time_minute_str+":"+time_second_str
		case 3:	'YYYY-MM-DD hh:mm:ss.mls
			if len(time_string)<>17 then time_format_err=NG
			time_string=time_year_str+"-"+time_month_str+"-"+time_date_str+" "+time_hour_str+":"+time_minute_str+":"+time_second_str+"."+time_ms_str
		case 4:	'hh:mm
			if len(time_string)<>4 then time_format_err=NG
			time_string=time_hour_str+":"+time_minute_str
		case 5:	'hh:mm:ss
			if len(time_string)<>6 then time_format_err=NG
			time_string=time_hour_str+":"+time_minute_str+":"+time_second_str
		case 6:	'hh:mm:ss.mls
			if len(time_string)<>9 then time_format_err=NG
			time_string=time_hour_str+":"+time_minute_str+":"+time_second_str+"."+time_ms_str
		case 7: 'DD-MM-YYYY
			if len(time_string)<>8 then time_format_err=NG
			time_string=time_date_str+"-"+time_month_str+"-"+time_year_str
		case 8:	'MM-DD-YYYY
			if len(time_string)<>8 then time_format_err=NG
			time_string=time_month_str+"-"+time_date_str+"-"+time_year_str
		end select
	else
		length=len(time_string)
		pos1=instr(1,time_string,"-",1)
		if pos1=0 then pos1=instr(1,time_string,"/",1)
		pos2=instr(1,time_string,"-",2)
		if pos2=0 then pos2=instr(1,time_string,"/",2)
		pos4=instr(1,time_string," ",1)	
		select case style
		case 0,1,2,3,7,8:
			if pos1=0 or pos2=0 then
err:		
				time_string=""
				exit sub
			end if
		case else
		
		goto time
		end select
		select case style
		case 0,1,2,3:
		
			time_year_str=left(time_string,pos1-1)
			time_month_str=mid(time_string,pos1+1,pos2-pos1-1)
			if pos4=0 then
				time_date_str=mid(time_string,pos2+1,length-pos2)
			else
				time_date_str=mid(time_string,pos2+1,pos4-pos2-1)
			end if
			
		case 7:
			time_date_str=left(time_string,pos1-1)
			time_month_str=mid(time_string,pos1+1,pos2-pos1-1)
			if pos4=0 then
				time_year_str=mid(time_string,pos2+1,length-pos2)
			else
				time_year_str=mid(time_string,pos2+1,pos4-pos2-1)
			end if
			
		case 8:
		
			time_month_str=left(time_string,pos1-1)
			time_date_str=mid(time_string,pos1+1,pos2-pos1-1)
			if pos4=0 then
				time_year_str=mid(time_string,pos2+1,length-pos2)
			else
				time_year_str=mid(time_string,pos2+1,pos4-pos2-1)
			end if	
		end select
		
		time_date_str=strgen(2-len(time_date_str),"0")+time_date_str
		time_month_str=strgen(2-len(time_month_str),"0")+time_month_str

time:
		pos1=instr(1,time_string,":",1)
		pos2=instr(1,time_string,":",2)
		pos3=instr(1,time_string,".",1)
		
		if pos1=0 and pos2=0 and pos3=0 then goto skip
		if (pos1=0 or pos2=0) and pos3>0 then goto err
		
		time_hour_str=mid(time_string,pos4+1,pos1-pos4-1)
		time_hour_str=strgen(2-len(time_hour_str),"0")+time_hour_str
		
		if pos2=0 then
			time_minute_str=mid(time_string,pos1+1,length-pos2)
		else
			time_minute_str=mid(time_string,pos1+1,pos2-pos1-1)
		end if
		time_minute_str=strgen(2-len(time_minute_str),"0")+time_minute_str
		if pos2=0 then goto skip
		
		if pos3=0 then
			time_second_str=mid(time_string,pos2+1,length-pos2)
		else
			time_second_str=mid(time_string,pos2+1,pos3-pos2-1)
			time_ms_str=mid(time_string,pos3+1,length-pos3)
			time_ms_str=strgen(3-len(time_ms_str),"0")+time_ms_str
		end if
		time_second_str=strgen(2-len(time_second_str),"0")+time_second_str
		
skip:
		time_string=time_year_str+time_month_str+time_date_str+time_hour_str+time_minute_str+time_second_str+time_ms_str
		length=len(time_string)
		select case length
		case 0,4,6,9,8,12,14,17:
		case else
			goto err
		end select
	end if
end sub