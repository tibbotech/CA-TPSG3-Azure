include "global.tbh"

function math_pow(base as integer, exp as integer) as real
	dim p as real = 1.0
	dim i as integer
	dim xx as real = base
	if exp < 0 then
		exp = -1 * exp
		xx = 1 / xx
	end if
	for i=1 to exp
		p = p * xx
	next i
	math_pow = p
end function


function math_hex_to_float(byref num as string(5)) as real
	dim tmp as dword = lval("&h" + num)
	dim sign as byte = (tmp SHR 31)
	dim mantissa as dword = (tmp AND &h7FFFFF) OR &h800000      ' 11244903
	dim exp as integer = ((tmp SHR 23) AND &hFF) - 127 - 23       ' -15	
	math_hex_to_float = mantissa * math_pow(2,exp) '343.1672
	if sign = 1 then
		math_hex_to_float = -math_hex_to_float
	end if
end function

'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
dim base64_chars as byte(64) = {
		&h41, &h42, &h43, &h44, &h45, &h46, &h47, &h48, &h49, &h4A, &h4B, &h4C, &h4D, &h4E, &h4F,
  &h50, &h51, &h52, &h53, &h54, &h55, &h56, &h57, &h58, &h59, &h5A,
		&h61, &h62, &h63, &h64, &h65, &h66, &h67, &h68, &h69, &h6A, &h6B, &h6C, &h6D, &h6E, &h6F,
  &h70, &h71, &h72, &h73, &h74, &h75, &h76, &h77, &h78, &h79, &h7A,
		&h30, &h31, &h32, &h33, &h34, &h35, &h36, &h37, &h38, &h39, &h2B, &h2F,
}

dim base64_inv as byte(80) = { 
	62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5,
	6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51 
}

sub base64_encode(byref input_str as string, input_len as byte, byref result as string)
	dim out_len as byte
	dim in as byte(255) = input_str
	dim out as byte(255)
	dim i as byte = 0
	dim j as byte = 0
	dim v as dword = 0
	dim index as byte
	if input_len > 254 then
		exit sub
	end if
	out_len = input_len
	if input_len MOD 3 <> 0 then
		out_len = out_len + 3 - (input_len MOD 3)
	end if
	out_len = out_len / 3
	out_len = out_len * 4	
	
	
	for i=0 to input_len step 3
		v = in(i)
		if i + 1 < input_len then
			v = (v SHL 8) OR in(i + 1)
		else
			v = v SHL 8
		end if
		
		if i + 2 < input_len then
			v = (v SHL 8) OR in(i + 2)
		else
			v = v SHL 8
		end if
		
		out(j) = base64_chars((v SHR 18) AND &h3F)
		out(j + 1) = base64_chars((v SHR 12) AND &h3F)
		if i + 1 < input_len then
			out(j + 2) = base64_chars((v SHR 6) AND &h3F)
		else
			out(j + 2) = &h3D '=
		end if
		
		if i + 2 < input_len then
			out(j + 3) = base64_chars(v AND &h3F)
		else
			out(j + 3) = &h3D '=
		end if

		j = j + 4
	next i

	result = out
	result = mid(result,0,out_len)
	
end sub

sub base64_decode(byref input as string, byref result as string)
	
	dim str_len as byte = 0
	dim i as byte
	dim j as byte
	dim v as dword
	dim out as byte(255)
	dim in as byte(255)
	in = input
	for i = len(input) to 255 - 1
		in(i) = 0
	next i
	
	for i = 0 to 255 - 1
		if in(i) <> 0 then
			str_len = str_len + 1
		end if
		out(i) = 0
	next i
	
	dim out_len as byte = str_len / 4 * 3
	for i=str_len-1 to 0 step -1
		if in(i) = &h3D then
			out_len = out_len - 1
		else
			exit for
		end if
	next i
	
	j = 0
	for i=0 to str_len-1 step 4
	
		v = base64_inv(in(i)-43)
		v = (v SHL 6) OR base64_inv(in(i+1)-43)
		
		if in(i+2)=&h3D then
			v = v SHL 6
		else
			v = (v SHL 6) OR base64_inv(in(i + 2) - 43)
		end if
		if in(i+3)=&h3D then
			v = v SHL 6
		else
			v = (v SHL 6) OR base64_inv(in(i + 3) - 43)
		end if
		
		out(j) = (v SHR 16) AND &hFF
		
		if in(i+2) <> &h3D then
			out(j+1) = (v SHR 8) AND &hFF
		end if
		
		if in(i+3) <> &h3D then
			out(j+2) = v AND &hFF
		end if

	
		j = j + 3
	next i

	result = out
	result = mid(result,0,out_len)

end sub

sub date_set_datetime(byref dt_string as string)
	
	dim daycounts, mincounts as word
	dim curr_daycounts, curr_mincounts as word
	dim syear,smonth,sdate,shour,smin,ssec as string(4)
	dim b as byte
	
	syear=mid(dt_string,15,2)
	smonth=mid(dt_string,9,3)
	sdate=mid(dt_string,6,2)
	shour=mid(dt_string,18,2)
	smin=mid(dt_string,21,2)
	ssec=mid(dt_string,24,2)
	
	select case smonth
	case "Jan": smonth="01"
	case "Feb": smonth="02"
	case "Mar": smonth="03"
	case "Apr": smonth="04"
	case "May": smonth="05"
	case "Jun": smonth="06"
	case "Jul": smonth="07"
	case "Aug": smonth="08"
	case "Sep": smonth="09"
	case "Oct": smonth="10"
	case "Nov": smonth="11"
	case "Dec": smonth="12"
	case else:
	end select
	daycounts=daycount(val(syear),val(smonth),val(sdate))
	mincounts=mincount(val(shour),val(smin))
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
	rtc.getdata(curr_daycounts,curr_mincounts, b)
	if curr_daycounts<>daycounts or curr_mincounts<>mincounts then
		b=val(ssec) 	
		rtc.setdata(daycounts,mincounts,b)
	end if
#endif		
end sub

function ftofixed(r as real, decimals as byte) as string
	ftofixed = fstr(r)
	dim pos as byte = instr(1,ftofixed, ".", 1)
	if pos = 0  then
		exit function
	else 
		if instr(1,ftofixed,"-",1) <> 0 then
			pos=pos-1
		end if
		ftofixed=ftostr(r,FTOSTR_MODE_PLAIN,pos+decimals-1)
	end if
end function

sub time_delay_ms(delay_ms as word)
	dim target as dword=sys.timercountms + delay_ms
	while sys.timercountms < target
	wend
end sub

function hex_mac(byref mac as string) as string
	dim i as integer = 0
	dim startpos as integer = 1
	dim endpos as integer = 0
	dim num as word = ""
	dim result as string = ""
	
	for i = 0 to 5
		endpos = instr(startpos,mac,".",0)
		num = val(  mid(mac,startpos,  endpos-startpos) )
		if num<>0 then
			if num < 16 then
				result = result + "0" + right(hex(num),1) + ":"
			else
				result = result + right(hex(num),2) + ":"
			end if
		else
			result = result + "00" + ":"
		end if
		startpos=endpos+1
	next i

	hex_mac = left(result,len(result)-1)

end function


function json_get_value(byref key as string, byref data as string) as string
    json_get_value=""
    dim start_pos as byte=0
    dim end_pos as byte=0
    dim current_key as string=""
    start_pos=instr(1,data,"{",1)
    while start_pos<>0
        'get current key
        start_pos=instr(start_pos,data,"\x22",1)
        if start_pos<>0 then
            end_pos=instr(start_pos+1,data,"\x22",1)
            current_key=mid(data,start_pos+1,end_pos-start_pos-1)

            'get value
            start_pos=instr(end_pos,data,":",1)
            if start_pos<>0 then
                end_pos=instr(start_pos,data,",",1)
                if end_pos=0 then
                    end_pos=instr(start_pos,data,"}",1)
                end if
                
            end if
            if current_key=key then
                dim is_string as boolean=instr(start_pos,data,"\x22",1)=start_pos+1
                if is_string then
                    'is string so look for closing quote
                    dim tmp_end as byte=start_pos+1
                    while tmp_end<len(data)
                        tmp_end=instr(tmp_end+1,data,"\x22",1)
                        if tmp_end=0 then
                            exit while
                        end if
                        if mid(data,tmp_end-1,1)<>"\x5c" then
                            end_pos=tmp_end+1
                            exit while
                        end if
                    wend
                end if
                json_get_value=mid(data,start_pos+1,end_pos-start_pos-1)
                if is_string then
					json_get_value=unescape_string(json_get_value)
                end if
                if instr(1,json_get_value,"\x22",1)=1 then
                    json_get_value=mid(json_get_value,2,len(json_get_value)-2)
                end if
                exit function
            end if
            start_pos=end_pos+1

        end if
    wend
end function

function escape_string(data as string) as string
    dim x, tmp_instr as byte
    dim k as byte=1
	dim i as byte=0
    escape_string=""
	
	dim special_characters as string(10)="\x22\r\n\x5c\t"
	dim escaped_chars as string(10)="\x22rn\x5ct"
    while k < len(data) + 1
		for i=0 to len(special_characters)-1
			dim escape_char as string(1)=mid(special_characters,i+1,1)
			dim escaped_char as string(1)=mid(escaped_chars,i+1,1)
			dim current_char as string(1)=mid(data,k,1)
			if escape_char = current_char then
				x=k
				dim tmp1 as string=mid(data,1,x-1)
				dim tmp2 as string=mid(data,x + 1,len(data)-x)
				data=tmp1+"\x5c"+escaped_char+tmp2
				k = k + 1
			end if
		next i
		k=k+1
    wend
	escape_string=data
end function

function unescape_string(data as string) as string
    dim x, tmp_instr, offset as byte
    dim k as byte=1
    dim unescaped_char as string(1)=""
    unescape_string=data

	while k < len(unescape_string) - 1
		dim current_char as string(1)=mid(unescape_string,k,1)
		'\
		if current_char="\x5c" then
			current_char=mid(unescape_string,k + 1,1)
			select case current_char
			case "r":
				unescaped_char="\r"
			case "n":
				unescaped_char="\n"
			case "t":
				unescaped_char="\t"
			case "\x5c":
				unescaped_char="\x5c"
			case "\x22":
				unescaped_char="\x22"
			case else:
				unescaped_char=current_char
			end select
			dim tmp1 as string=mid(unescape_string,1,k-1)
			dim tmp2 as string=mid(unescape_string,k + 2,255)
			unescape_string=tmp1+unescaped_char+tmp2
		end if
		
		k=k+1
    wend
end function

function str_to_hex(byref hash as string) as string
	dim i as byte
	dim j as byte
    dim result as byte(255)
	str_to_hex=""
	for i=0 to len(hash)-1
		dim part as string(2)=mid(hex(asc(mid(hash,i+1,1))),3,2)
		if len(part)=1 then
			part="0" + part
		end if
		str_to_hex=str_to_hex+part
	next i
    result=str_to_hex
	j=len(str_to_hex)
	str_to_hex=""
    for i=0 to j-1
        if result(i)<97 AND result(i)>=65 then
            result(i)=result(i)+32
        end if
		str_to_hex=str_to_hex+chr(result(i))
    next i
end function